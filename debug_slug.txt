# app/models.py
from datetime import datetime
from enum import Enum
from flask_login import UserMixin
from werkzeug.security import generate_password_hash, check_password_hash
from app import db

class UserRole(Enum):
    USER = "user"
    ADMIN = "admin"

class NoteStatus(str, Enum):
    PRIVATE = "private"
    PENDING = "pending"
    PUBLISHED = "published"


class User(UserMixin, db.Model):
    __tablename__ = "users"
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(100), unique=True, nullable=False)
    email = db.Column(db.String(150), unique=True, nullable=False)
    password_hash = db.Column(db.String(200), nullable=False)
    is_admin = db.Column(db.Boolean, default=False, nullable=False)
    is_professional = db.Column(db.Boolean, default=False, nullable=False)  
    created_at = db.Column(db.DateTime, default=datetime.now, nullable=False)
    url_slug = db.Column(db.String(100), unique=True, nullable=True)

    # Campos dinámicos para médicos
    specialty = db.Column(db.String(100), nullable=True)        # Ej: Ginecología
    license_number = db.Column(db.String(50), nullable=True)    # Matrícula
    bio = db.Column(db.Text, nullable=True)                     # Biografía
    profile_image = db.Column(db.String(200), nullable=True)    # URL o ruta
    years_experience = db.Column(db.Integer, nullable=True)     # Años de experiencia

    # Relaciones
    notes = db.relationship("Note", backref="author", foreign_keys="Note.user_id", lazy="dynamic")
    publications = db.relationship("Publication", backref="author", foreign_keys="Publication.user_id", lazy="dynamic")
    clinics = db.relationship("Clinic", backref="doctor", foreign_keys="Clinic.doctor_id", lazy="dynamic")
    

    def set_password(self, password):
        self.password_hash = generate_password_hash(password)

    def check_password(self, password):
        return check_password_hash(self.password_hash, password)

    @property
    def is_admin_user(self):
        return self.is_admin

    def __repr__(self):
        return f"<User {self.username}>"


class Note(db.Model):
    __tablename__ = "notes"
    id = db.Column(db.Integer, primary_key=True)
    title = db.Column(db.String(200), nullable=False)
    content = db.Column(db.Text, nullable=False)
    status = db.Column(db.Enum(NoteStatus), default=NoteStatus.PRIVATE, nullable=False)
    user_id = db.Column(db.Integer, db.ForeignKey("users.id"), nullable=False)
    approved_by = db.Column(db.Integer, db.ForeignKey("users.id"), nullable=True)
    approved_at = db.Column(db.DateTime, nullable=True)
    created_at = db.Column(db.DateTime, default=datetime.now, nullable=False)
    updated_at = db.Column(db.DateTime, default=datetime.now, onupdate=datetime.utcnow, nullable=False)

    approver = db.relationship("User", foreign_keys=[approved_by])

    def can_edit(self, user):
        return user.is_admin_user or user.id == self.user_id

    def can_view(self, user):
        if self.status == NoteStatus.PUBLISHED:
            return True
        elif self.status == NoteStatus.PENDING:
            return user.is_authenticated and (user.is_admin or user.id == self.user_id)
        else:  # PRIVATE
            return user.is_authenticated and (user.is_admin or user.id == self.user_id)

    @property
    def status_display(self):
        return {
            NoteStatus.PRIVATE: "Privada",
            NoteStatus.PENDING: "Pendiente",
            NoteStatus.PUBLISHED: "Publicada"
        }.get(self.status, "Desconocido")

    @property
    def status_class(self):
        return {
            NoteStatus.PRIVATE: "bg-secondary",
            NoteStatus.PENDING: "bg-warning text-dark",
            NoteStatus.PUBLISHED: "bg-success"
        }.get(self.status, "bg-secondary")


class Publication(db.Model):
    __tablename__ = "publications"
    id = db.Column(db.Integer, primary_key=True)
    type = db.Column(db.String(50), nullable=False)
    title = db.Column(db.String(200), nullable=False)
    content = db.Column(db.Text, nullable=False)
    excerpt = db.Column(db.String(500), nullable=True)
    is_published = db.Column(db.Boolean, default=True, nullable=False)
    user_id = db.Column(db.Integer, db.ForeignKey("users.id"), nullable=False)
    tags = db.Column(db.String(200), nullable=True)
    read_time = db.Column(db.Integer, nullable=True)
    created_at = db.Column(db.DateTime, default=datetime.now, nullable=False)
    updated_at = db.Column(db.DateTime, default=datetime.now, onupdate=datetime.now, nullable=False)
    published_at = db.Column(db.DateTime, nullable=True)

    def can_edit(self, user):
        return user.is_admin_user or user.id == self.user_id

    @property
    def type_icon(self):
        return {
            "Educativo": "fa-graduation-cap",
            "Caso de éxito": "fa-trophy",
            "Autoridad técnica": "fa-star",
            "Tutorial": "fa-book",
            "Análisis": "fa-chart-line"
        }.get(self.type, "fa-file-alt")

    @property
    def type_color(self):
        return {
            "Educativo": "text-info",
            "Caso de éxito": "text-success",
            "Autoridad técnica": "text-warning",
            "Tutorial": "text-primary",
            "Análisis": "text-danger"
        }.get(self.type, "text-secondary")

    @property
    def tag_list(self):
        if self.tags:
            return [tag.strip() for tag in self.tags.split(",") if tag.strip()]
        return []

# models.py para consultorios y turnos
class Clinic(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), nullable=False)
    address = db.Column(db.String(200), nullable=False)
    phone = db.Column(db.String(20))
    specialty = db.Column(db.String(50))  # Ej: Ginecología
    doctor_id = db.Column(db.Integer, db.ForeignKey("users.id"))
    is_active = db.Column(db.Boolean, default=True)

class Availability(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    clinic_id = db.Column(db.Integer, db.ForeignKey("clinic.id"))
    date = db.Column(db.Date, nullable=False)
    time = db.Column(db.Time, nullable=False)
    is_booked = db.Column(db.Boolean, default=False)
    
    # Relación con Clinic
    clinic = db.relationship("Clinic", backref="availability")

class Appointment(db.Model):
    __tablename__ = "appointments"
    id = db.Column(db.Integer, primary_key=True)
    availability_id = db.Column(db.Integer, db.ForeignKey("availability.id"))
    patient_id = db.Column(db.Integer, db.ForeignKey("users.id"))
    status = db.Column(db.String(20), default="confirmed")
    created_at = db.Column(db.DateTime, default=datetime.now)
    
    # ✅ Relaciones
    availability = db.relationship("Availability", backref="appointments")
    patient = db.relationship("User", backref="appointments")

class MedicalRecord(db.Model):
    __tablename__ = "medical_records"
    id = db.Column(db.Integer, primary_key=True)
    patient_id = db.Column(db.Integer, db.ForeignKey("users.id"), nullable=False)
    doctor_id = db.Column(db.Integer, db.ForeignKey("users.id"), nullable=False)
    appointment_id = db.Column(db.Integer, db.ForeignKey("appointments.id"))  # Opcional
    title = db.Column(db.String(100), nullable=False)  # Ej: "Consulta inicial", "Control"
    notes = db.Column(db.Text, nullable=False)
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    updated_at = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)

    # Relaciones
    patient = db.relationship("User", foreign_keys=[patient_id], backref="as_patient_records")
    doctor = db.relationship("User", foreign_keys=[doctor_id], backref="as_doctor_records")
    appointment = db.relationship("Appointment", backref="clinical_note")

class Schedule(db.Model):
    __tablename__ = "schedules"
    id = db.Column(db.Integer, primary_key=True)
    doctor_id = db.Column(db.Integer, db.ForeignKey("users.id"), nullable=False)
    clinic_id = db.Column(db.Integer, db.ForeignKey("clinic.id"), nullable=False)
    day_of_week = db.Column(db.Integer, nullable=False)  # 0=Lunes, 6=Domingo
    start_time = db.Column(db.Time, nullable=False)
    end_time = db.Column(db.Time, nullable=False)
    is_active = db.Column(db.Boolean, default=True)

    # Relaciones
    doctor = db.relationship("User", backref="schedules")
    clinic = db.relationship("Clinic", backref="schedules")

# app/routes.py
import os
import uuid
import pandas as pd
import json
from datetime import datetime, timedelta
from flask import (render_template, request, redirect, url_for, flash, jsonify, session, Blueprint, current_app, abort, send_from_directory)
from functools import wraps
from flask_login import current_user, login_required
from werkzeug.utils import secure_filename
from app.models import User, Note, Publication, NoteStatus, Clinic, Availability, Appointment, MedicalRecord, Schedule
from app import db
from app import mail
from flask_mail import Message

import re
import chardet

# Carpeta para archivos temporales
UPLOAD_FOLDER = 'temp_csv'
os.makedirs(UPLOAD_FOLDER, exist_ok=True)

def generar_slug_unico(base_slug):
    from app.models import User
    slug = re.sub(r'[^a-z0-9-]+', '-', base_slug.lower())
    slug = re.sub(r'-+', '-', slug).strip('-')
    original_slug = slug
    counter = 1
    while User.query.filter_by(url_slug=slug).first():
        slug = f"{original_slug}-{counter}"
        counter += 1
    return slug

def enviar_confirmacion_turno(appointment):
    try:
        msg = Message(
            subject="✅ Confirmación de turno médico",
            recipients=[appointment.patient.email],
            body=f"""
        Hola {appointment.patient.username},
        Tu turno ha sido reservado con éxito:
        🔹 Médico: {appointment.availability.clinic.doctor.username}
        🔹 Consultorio: {appointment.availability.clinic.name}
        🔹 Dirección: {appointment.availability.clinic.address}
        🔹 Fecha: {appointment.availability.date.strftime('%d/%m/%Y')}
        🔹 Hora: {appointment.availability.time.strftime('%H:%M')}
        Gracias por usar nuestra plataforma.
        ¡Te esperamos!
        Saludos,
        Equipo de Salud Digital
        """.strip(),
        html=f"""
        <h2>✅ Confirmación de turno</h2>
        <p>Hola <strong>{appointment.patient.username}</strong>,</p>
        <p>Tu turno ha sido reservado con éxito:</p>
        <ul>
            <li><strong>Médico:</strong> {appointment.availability.clinic.doctor.username}</li>
            <li><strong>Consultorio:</strong> {appointment.availability.clinic.name}</li>
            <li><strong>Dirección:</strong> {appointment.availability.clinic.address}</li>
            <li><strong>Fecha:</strong> {appointment.availability.date.strftime('%d/%m/%Y')}</li>
            <li><strong>Hora:</strong> {appointment.availability.time.strftime('%H:%M')}</li>
        </ul>
        <p>Gracias por usar nuestra plataforma.<br>
        ¡Te esperamos!</p>
        <p>Saludos,<br>
        <strong>Equipo de Salud Digital</strong></p>
        """.strip()
        )
        mail.send(msg)
        return True
    except Exception as e:
        print(f"❌ Error al enviar email: {str(e)}")
        return False

routes = Blueprint("routes", __name__)

def require_admin(f):
    @wraps(f)
    def decorated_function(*args, **kwargs):
        if not current_user.is_authenticated or not current_user.is_admin:
            flash("Acceso restringido solo a administradores.", "danger")
            return redirect(url_for("routes.index"))
        return f(*args, **kwargs)
    return decorated_function

BIO_SHORT = "📊 Consultor freelance en Analítica de Datos y Sistemas • Formador en Python y BI • Certificado Google Data Analytics • Transformo datos en decisiones."
BIO_EXTENDED = """Soy José Luis Astiazu, consultor independiente en análisis de datos, big data y sistemas..."""

PUBLICATIONS = [
    {
        "id": 1001,
        "type": "Educativo",
        "title": "El error más común en análisis de datos",
        "content": "En mi experiencia como consultor, el error más común que veo..."
    },
    {
        "id": 1002,
        "type": "Caso de éxito",
        "title": "Cómo optimicé un proceso de ETL con Python",
        "content": "Un cliente tenía un proceso de carga de datos que tardaba 8 horas..."
    }
]

@routes.route("/")
def index():
    return render_template("index.html", bio_short=BIO_SHORT, bio_extended=BIO_EXTENDED, active_tab="home")

@routes.route('/medico/<string:url_slug>')
def perfil_publico_medico(url_slug):
    doctor = User.query.filter_by(url_slug=url_slug, is_professional=True).first_or_404()
    clinics = Clinic.query.filter_by(doctor_id=doctor.id, is_active=True).all()
    return render_template(
        'public/perfil_medico.html',
        doctor=doctor,
        clinics=clinics,
        active_tab='medicos'
    )

@routes.route("/publications")
def publications():
    db_publications = Publication.query.filter_by(is_published=True).order_by(Publication.published_at.desc()).all()
    combined = []
    for pub in db_publications:
        if not pub.published_at:
            pub.published_at = pub.created_at or datetime.utcnow()
        combined.append({
            "id": pub.id,
            "type": pub.type,
            "title": pub.title,
            "content": pub.excerpt or pub.content[:200] + "...",
            "published_at": pub.published_at,
            "author": pub.author.username if pub.author else "José Luis Astiazu",
            "is_db": True
        })
    for pub in PUBLICATIONS:
        combined.append({
            "id": pub["id"],
            "type": pub["type"],
            "title": pub["title"],
            "content": pub["content"][:200] + "...",
            "published_at": pub.get("published_at", datetime.now()),
            "author": "José Luis Astiazu",
            "is_db": False
        })
    combined.sort(key=lambda x: x["published_at"], reverse=True)
    return render_template(
        "publications.html",
        publications=combined,
        bio_short=BIO_SHORT,
        bio_extended=BIO_EXTENDED,
        active_tab="publications"
    )

@routes.route('/publication/<int:pub_id>')
def view_publication(pub_id):
    publication = Publication.query.filter_by(id=pub_id, is_published=True).first()
    if publication:
        # Asignar type_color según el tipo
        type_colors = {
            'Educativo': 'text-primary',
            'Caso de éxito': 'text-success',
            'Análisis': 'text-warning',
            'Opinión': 'text-info'
        }
        publication.type_color = type_colors.get(publication.type, 'text-secondary')
        return render_template(
            'view_publication.html',
            publication=publication,
            bio_short=BIO_SHORT,
            bio_extended=BIO_EXTENDED
        )
    static_pub = next((p for p in PUBLICATIONS if p['id'] == pub_id), None)
    if static_pub:
        # Mapear type a color
        type_colors = {
            'Educativo': 'text-primary',
            'Caso de éxito': 'text-success',
            'Análisis': 'text-warning',
            'Opinión': 'text-info'
        }
        type_color = type_colors.get(static_pub['type'], 'text-secondary')

        pub_data = {
            'id': pub_id,
            'title': static_pub['title'],
            'content': static_pub['content'],
            'type': static_pub['type'],
            'type_color': type_color,
            'author': {'full_name': 'José Luis Astiazu'},
            'published_at': datetime.utcnow(),
            'excerpt': static_pub.get('excerpt', ''),
            'read_time': static_pub.get('read_time', 5),
            'tags': static_pub.get('tags', ''),
            'tag_list': [tag.strip() for tag in static_pub.get('tags', '').split(',')] if static_pub.get('tags') else []
        }
        return render_template(
            'view_publication.html',
            publication=pub_data,
            bio_short=BIO_SHORT,
            bio_extended=BIO_EXTENDED
        )
    abort(404)
    
@routes.route('/admin/dashboard')
@login_required
def admin_dashboard():
    if not current_user.is_admin:
        flash("Acceso denegado", "danger")
        return redirect(url_for("routes.index"))

    total_users = User.query.count()
    total_medicos = User.query.filter_by(is_professional=True).count()
    pending_notes = Note.query.filter_by(status=NoteStatus.PENDING).all()
    turnos_hoy = Appointment.query.join(Availability).filter(
        Availability.date == datetime.now().date()
    ).count()

    return render_template(
        'admin_dashboard.html',
        total_users=total_users,
        total_medicos=total_medicos,
        pending_notes=pending_notes,
        turnos_hoy=turnos_hoy
    )
    
@routes.route('/admin/publication/new', methods=['GET', 'POST'])
@require_admin
def new_publication():
    if request.method == 'POST':
        title = request.form.get('title', '').strip()
        content = request.form.get('content', '').strip()
        pub_type = request.form.get('type', '').strip()
        excerpt = request.form.get('excerpt', '').strip()
        tags = request.form.get('tags', '').strip()
        
        if not title or not content or not pub_type:
            flash('Por favor completa todos los campos requeridos', 'error')
            return render_template('edit_publication.html', publication=None, bio_short=BIO_SHORT, bio_extended=BIO_EXTENDED)
        
        publication = Publication()
        publication.title = title
        publication.content = content
        publication.type = pub_type
        publication.excerpt = excerpt
        publication.tags = tags
        publication.user_id = current_user.id
        publication.is_published = True  # ✅ Clave
        publication.published_at = datetime.now()  # ✅ Clave
        db.session.add(publication)
        db.session.commit()
        flash('✅ Publicación creada exitosamente', 'success')
        return redirect(url_for('routes.admin_panel'))
    
    return render_template('edit_publication.html', publication=None, bio_short=BIO_SHORT, bio_extended=BIO_EXTENDED)

@routes.route('/admin/publication/<int:pub_id>/edit', methods=['GET', 'POST'])
@require_admin
def edit_publication(pub_id):
    publication = Publication.query.get_or_404(pub_id)
    
    if request.method == 'POST':
        # ... (campos)

        # ✅ Si está publicada, asegurar fecha
        if publication.is_published:
            if not publication.published_at:
                publication.published_at = datetime.now()
        
        db.session.commit()
        flash('✅ Publicación actualizada exitosamente', 'success')
        return redirect(url_for('routes.admin_panel'))
    
    return render_template('edit_publication.html', publication=publication, bio_short=BIO_SHORT, bio_extended=BIO_EXTENDED)

@routes.route('/admin/publication/<int:pub_id>/delete', methods=['POST'])
@require_admin
def delete_publication(pub_id):
    publication = Publication.query.get_or_404(pub_id)
    db.session.delete(publication)
    db.session.commit()
    flash('🗑️ Publicación eliminada exitosamente', 'info')
    return redirect(url_for('routes.admin_panel'))

@routes.route("/portfolio")
def portfolio():
    return render_template("portfolio.html", bio_short=BIO_SHORT, bio_extended=BIO_EXTENDED, active_tab="portfolio")

@routes.route("/notes")
@login_required
def notes():
    if current_user.is_admin:
        all_notes = Note.query.order_by(Note.created_at.desc()).all()
        user_notes = [n for n in all_notes if n.user_id == current_user.id]
        other_notes = [n for n in all_notes if n.user_id != current_user.id]
    else:
        user_notes = Note.query.filter_by(user_id=current_user.id).all()
        other_notes = []
    return render_template(
        "notes.html",
        user_notes=user_notes,
        other_notes=other_notes,
        bio_short=BIO_SHORT,
        bio_extended=BIO_EXTENDED,
        active_tab="notes"
    )

@routes.route('/note/<int:note_id>')
def view_note(note_id):
    note = Note.query.get_or_404(note_id)
    if not note.can_view(current_user):
        flash("No tienes permisos para ver esta nota", "danger")
        return redirect(url_for("routes.index"))
    return render_template("view_note.html", note=note, bio_short=BIO_SHORT, bio_extended=BIO_EXTENDED)

@routes.route('/note/new', methods=['GET', 'POST'])
@routes.route('/note/<int:note_id>/edit', methods=['GET', 'POST'])
@login_required
def edit_note(note_id=None):
    note = None
    if note_id:
        note = Note.query.get_or_404(note_id)
        if not note.can_edit(current_user):
            flash('No tienes permisos para editar esta nota', 'error')
            return redirect(url_for('routes.notes'))
    if request.method == 'POST':
        title = request.form.get('title', '').strip()
        content = request.form.get('content', '').strip()
        if not title or not content:
            flash('Por favor completa el título y contenido', 'error')
            return render_template('edit_note.html', note=note, bio_short=BIO_SHORT, bio_extended=BIO_EXTENDED)
        if note:
            note.title = title
            note.content = content
            db.session.commit()
            flash('✅ Nota actualizada', 'success')
        else:
            new_note = Note(
                title=title,
                content=content,
                user_id=current_user.id,
                status=NoteStatus.PRIVATE
            )
            db.session.add(new_note)
            db.session.commit()
            flash('✅ Nota creada', 'success')
        return redirect(url_for('routes.notes'))
    return render_template('edit_note.html', note=note, bio_short=BIO_SHORT, bio_extended=BIO_EXTENDED)

@routes.route('/note/<int:note_id>/delete', methods=['POST'])
@login_required
def delete_note(note_id):
    note = Note.query.get_or_404(note_id)
    if not note.can_edit(current_user):
        flash('No tienes permisos para eliminar esta nota', 'error')
        return redirect(url_for('routes.notes'))
    db.session.delete(note)
    db.session.commit()
    flash('🗑️ Nota eliminada exitosamente', 'info')
    return redirect(url_for('routes.notes'))

@routes.route("/notas-publicadas")
def public_notes():
    published_notes = Note.query.filter_by(status=NoteStatus.PUBLISHED).order_by(Note.approved_at.desc()).all()
    return render_template(
        "public_notes.html",
        published_notes=published_notes,
        bio_short=BIO_SHORT,
        bio_extended=BIO_EXTENDED,
        active_tab="public_notes"
    )

@routes.route("/data-analysis")
def data_analysis():
    return render_template("data_analysis.html", bio_short=BIO_SHORT, bio_extended=BIO_EXTENDED, active_tab="data_analysis")

@routes.route("/upload-csv", methods=["POST"])
def upload_csv():
    try:
        if "file" not in request.files:
            return jsonify({"error": "No file selected"}), 400
        file = request.files["file"]
        if file.filename == "":
            return jsonify({"error": "No file selected"}), 400
        if not file.filename.lower().endswith(".csv"):
            return jsonify({"error": "Please upload a CSV file"}), 400

        # Generar ID único para el archivo
        file_id = str(uuid.uuid4())
        file_path = os.path.join(UPLOAD_FOLDER, f"{file_id}.csv")

        # Detectar codificación
        raw = file.stream.read(10000)
        encoding = chardet.detect(raw)["encoding"] or "utf-8"
        file.stream.seek(0)

        # Guardar archivo
        file.save(file_path)

        # Leer CSV
        df = pd.read_csv(file_path, encoding=encoding)
        if df.empty or len(df.columns) == 0:
            os.remove(file_path)
            return jsonify({"error": "CSV inválido o vacío"}), 400

        # Devolver file_id para usar en análisis
        info = {
            "file_id": file_id,
            "columns": df.columns.tolist(),
            "shape": df.shape,
            "dtypes": df.dtypes.astype(str).to_dict(),
            "preview": df.head(10).to_dict("records"),
            "missing_values": df.isnull().sum().to_dict(),
        }
        return jsonify(info)

    except Exception as e:
        current_app.logger.error(f"Error processing CSV: {str(e)}")
        return jsonify({"error": f"Error procesando el archivo: {str(e)}"}), 500

@routes.route("/analyze-data", methods=["POST"])
def analyze_data():
    try:
        data = request.get_json()
        file_id = data.get("file_id")
        x_column = data.get("x_column")
        y_column = data.get("y_column")
        chart_type = data.get("chart_type", "scatter")

        if not file_id or not x_column or not y_column:
            return jsonify({"error": "Faltan datos: file_id, x_column o y_column"}), 400

        file_path = os.path.join(UPLOAD_FOLDER, f"{file_id}.csv")
        if not os.path.exists(file_path):
            return jsonify({"error": "Datos no encontrados. Suba el CSV nuevamente."}), 400

        df = pd.read_csv(file_path)

        if x_column not in df.columns or y_column not in df.columns:
            return jsonify({"error": "Columnas no encontradas"}), 400

        # ✅ Validar que Y sea numérica
        y_numeric = pd.to_numeric(df[y_column], errors='coerce')
        if y_numeric.isnull().all():
            return jsonify({"error": f"La columna '{y_column}' debe ser numérica para graficar"}), 400

        # Llenar NaNs y tomar solo 100 filas
        x_values = df[x_column].astype(str).tolist()[:100]
        y_values = y_numeric.fillna(0).tolist()[:100]

        chart_data = {
            "labels": x_values,
            "datasets": [{
                "label": f"{y_column} vs {x_column}",
                "data": y_values,
                "borderColor": "rgb(75, 192, 192)",
                "backgroundColor": "rgba(75, 192, 192, 0.2)",
                "tension": 0.1,
            }]
        }

        if chart_type == "scatter":
            chart_data["datasets"][0]["data"] = [
                {"x": x, "y": float(y)} for x, y in zip(x_values, y_values)
            ]

        return jsonify({
            "chart_data": chart_data,
            "chart_type": chart_type,
            "title": f"{y_column} vs {x_column}"
        })
    except Exception as e:
        current_app.logger.error(f"Error analyzing data: {str(e)}")
        return jsonify({"error": f"Error analyzing data: {str(e)}"}), 500
    
@routes.route('/admin')
@require_admin
def admin_panel():
    pending_notes = Note.query.filter_by(status=NoteStatus.PENDING).all()
    published_notes = Note.query.filter_by(status=NoteStatus.PUBLISHED).all()
    all_publications = Publication.query.all()
    all_clinics = Clinic.query.all()
    return render_template(
        'admin_panel.html',
        pending_notes=pending_notes,
        published_notes=published_notes,
        all_publications=all_publications,
        all_clinics=all_clinics,
        bio_short=BIO_SHORT,
        bio_extended=BIO_EXTENDED,
        active_tab='admin'
    )

@routes.route('/admin/note/<int:note_id>/approve', methods=['POST'])
@require_admin
def admin_approve_note(note_id):
    note = Note.query.get_or_404(note_id)
    note.status = NoteStatus.PUBLISHED
    note.approved_by = current_user.id
    note.approved_at = datetime.utcnow()
    db.session.commit()
    flash(f'✅ Nota "{note.title}" aprobada y publicada', 'success')
    return redirect(url_for('routes.admin_panel'))

@routes.route('/admin/note/<int:note_id>/reject', methods=['POST'])
@require_admin
def admin_reject_note(note_id):
    note = Note.query.get_or_404(note_id)
    note.status = NoteStatus.PRIVATE
    db.session.commit()
    flash(f'❌ Nota "{note.title}" rechazada y marcada como privada', 'info')
    return redirect(url_for('routes.admin_panel'))

@routes.route("/medicos")
def medicos():
    doctors = User.query.filter_by(is_professional=True).all()
    return render_template(
        "medicos.html",
        doctors=doctors,
        bio_short=BIO_SHORT,
        bio_extended=BIO_EXTENDED,
        active_tab="medicos"
    )

@routes.route("/medico/<int:doctor_id>")
def perfil_medico(doctor_id):
    doctor = User.query.filter_by(id=doctor_id, is_professional=True).first_or_404()
    clinics = Clinic.query.filter_by(doctor_id=doctor_id, is_active=True).all()
    return render_template(
        "public/perfil_medico.html",
        doctor=doctor,
        clinics=clinics,
        bio_short=BIO_SHORT,
        bio_extended=BIO_EXTENDED
    )

@routes.route('/mi-perfil')
@login_required
def mi_perfil():
    if current_user.is_admin:
        return redirect(url_for('routes.admin_dashboard'))
    elif current_user.is_professional:
        # Perfil médico normal
        turnos_recibidos = Appointment.query.join(Availability).join(Clinic).filter(
            Clinic.doctor_id == current_user.id
        ).order_by(Appointment.created_at.desc()).all()
        return render_template(
            'mi_perfil_medico.html',
            turnos_recibidos=turnos_recibidos,
            bio_short=BIO_SHORT,
            bio_extended=BIO_EXTENDED
        )
    else:
        # Usuario normal (paciente)
        flash("No tienes un perfil profesional", "info")
        return redirect(url_for('routes.index'))

@routes.route('/mi-perfil/editar', methods=['GET', 'POST'])
@login_required
def editar_perfil_medico():
    if not current_user.is_professional:
        flash('Acceso denegado', 'danger')
        return redirect(url_for('routes.index'))
    if request.method == 'POST':
        current_user.specialty = request.form.get('specialty', '').strip()
        current_user.license_number = request.form.get('license_number', '').strip()
        current_user.bio = request.form.get('bio', '').strip()
        current_user.years_experience = request.form.get('years_experience', type=int)
        db.session.commit()
        flash('✅ Perfil actualizado', 'success')
        #return redirect(url_for('routes.mi_perfil_medico', doctor_id=current_user.id))
        return redirect(url_for('routes.mi_perfil'))
    return render_template('editar_perfil_medico.html', user=current_user)

@routes.route('/consultorio/nuevo', methods=['GET', 'POST'])
@login_required
def nuevo_consultorio():
    if not current_user.is_professional:
        flash('Acceso denegado: solo profesionales pueden crear consultorios', 'danger')
        return redirect(url_for('routes.index'))
    if request.method == 'POST':
        name = request.form.get('name', '').strip()
        address = request.form.get('address', '').strip()
        phone = request.form.get('phone', '').strip()
        specialty = request.form.get('specialty', '').strip()
        if not name or not address:
            flash('Por favor completa los campos obligatorios', 'error')
            return render_template('nuevo_consultorio.html', bio_short=BIO_SHORT, bio_extended=BIO_EXTENDED)
        clinic = Clinic(
            name=name,
            address=address,
            phone=phone,
            specialty=specialty,
            doctor_id=current_user.id,
            is_active=True
        )
        db.session.add(clinic)
        db.session.commit()
        flash('✅ Consultorio creado exitosamente', 'success')
        return redirect(url_for('routes.perfil_medico', doctor_id=current_user.id))
    return render_template('nuevo_consultorio.html', bio_short=BIO_SHORT, bio_extended=BIO_EXTENDED)

@routes.route('/consultorio/<int:clinic_id>/editar', methods=['GET', 'POST'])
@login_required
def editar_consultorio(clinic_id):
    clinic = Clinic.query.get_or_404(clinic_id)
    if clinic.doctor_id != current_user.id:
        flash('No puedes editar este consultorio', 'danger')
        return redirect(url_for('routes.perfil_medico', doctor_id=current_user.id))
    if request.method == 'POST':
        clinic.name = request.form.get('name', '').strip()
        clinic.address = request.form.get('address', '').strip()
        clinic.phone = request.form.get('phone', '').strip()
        clinic.specialty = request.form.get('specialty', '').strip()
        db.session.commit()
        flash('✅ Consultorio actualizado', 'success')
        return redirect(url_for('routes.perfil_medico', doctor_id=current_user.id))
    return render_template('editar_consultorio.html', clinic=clinic)

@routes.route('/consultorio/<int:clinic_id>/eliminar', methods=['POST'])
@login_required
def eliminar_consultorio(clinic_id):
    clinic = Clinic.query.get_or_404(clinic_id)
    if clinic.doctor_id != current_user.id:
        flash('No puedes eliminar este consultorio', 'danger')
        return redirect(url_for('routes.perfil_medico', doctor_id=current_user.id))
    db.session.delete(clinic)
    db.session.commit()
    flash('🗑️ Consultorio eliminado', 'info')
    return redirect(url_for('routes.perfil_medico', doctor_id=current_user.id))

@routes.route("/turnos/<int:clinic_id>")
def turnos_por_clinica(clinic_id):
    clinic = Clinic.query.get_or_404(clinic_id)
    avail = Availability.query.filter_by(clinic_id=clinic_id, is_booked=False).order_by(
        Availability.date, Availability.time
    ).all()
    from collections import defaultdict
    grouped = defaultdict(list)
    for a in avail:
        grouped[a.date].append(a)
    return render_template(
        "turnos.html",
        clinic=clinic,
        availability=avail,
        grouped=dict(grouped),
        bio_short=BIO_SHORT,
        bio_extended=BIO_EXTENDED
    )

@routes.route('/turno/reservar', methods=['POST'])
def reservar_turno():
    availability_id = request.form.get('availability_id', type=int)
    if not availability_id:
        flash('Turno no válido', 'danger')
        return redirect(url_for('routes.medicos'))
    availability = Availability.query.get_or_404(availability_id)
    if availability.is_booked:
        flash('Este turno ya fue reservado', 'info')
        return redirect(url_for('routes.turnos_por_clinica', clinic_id=availability.clinic_id))
    patient_name = request.form.get('patient_name', '').strip()
    patient_email = request.form.get('patient_email', '').strip()
    if not patient_name or not patient_email:
        flash('Por favor completa tu nombre y email', 'warning')
        return redirect(url_for('routes.turnos_por_clinica', clinic_id=availability.clinic_id))
    patient = User.query.filter_by(email=patient_email).first()
    if not patient:
        patient = User(
            username=patient_name,
            email=patient_email,
            is_professional=False,
            is_admin=False
        )
        patient.set_password("temp" + patient_email)
        db.session.add(patient)
        db.session.flush()
    appointment = Appointment(
        availability_id=availability_id,
        patient_id=patient.id,
        status="confirmed"
    )
    availability.is_booked = True
    db.session.add(appointment)
    db.session.commit()
    exito = enviar_confirmacion_turno(appointment)
    if exito:
        flash('✅ ¡Turno reservado! Revisa tu email para confirmación.', 'success')
    else:
        flash('✅ Turno reservado, pero no pudimos enviarte un email.', 'info')
    return redirect(url_for('routes.confirmacion_turno', appointment_id=appointment.id))

@routes.route('/turno/confirmado/<int:appointment_id>')
def confirmacion_turno(appointment_id):
    appointment = Appointment.query.get_or_404(appointment_id)
    return render_template('confirmacion_turno.html', appointment=appointment)

@routes.route('/mi-agenda')
@login_required
def mi_agenda():
    if not current_user.is_professional:
        flash('Acceso denegado', 'danger')
        return redirect(url_for('routes.index'))
    schedules = Schedule.query.filter_by(doctor_id=current_user.id).all()
    clinics = Clinic.query.filter_by(doctor_id=current_user.id).all()
    return render_template('mi_agenda.html', schedules=schedules, clinics=clinics)

@routes.route('/api/horarios/<int:doctor_id>/<int:clinic_id>/<string:fecha>')
def api_horarios(doctor_id, clinic_id, fecha):
    try:
        fecha_obj = datetime.strptime(fecha, '%Y-%m-%d').date()
    except ValueError:
        return jsonify({"error": "Formato de fecha inválido"}), 400
    avail = Availability.query.join(Clinic).filter(
        Clinic.doctor_id == doctor_id,
        Clinic.id == clinic_id,
        Availability.date == fecha_obj,
        Availability.is_booked == False
    ).all()
    return jsonify([
        {
            "id": a.id,
            "time": a.time.strftime('%H:%M')
        } for a in avail
    ])

@routes.route('/agenda/nueva', methods=['POST'])
@login_required
def nueva_agenda():
    if not current_user.is_professional:
        return "Acceso denegado", 403
    day_of_week = int(request.form.get('day_of_week'))
    clinic_id = int(request.form.get('clinic_id'))
    start_time = datetime.strptime(request.form.get('start_time'), '%H:%M').time()
    end_time = datetime.strptime(request.form.get('end_time'), '%H:%M').time()
    exists = Schedule.query.filter_by(
        doctor_id=current_user.id,
        clinic_id=clinic_id,
        day_of_week=day_of_week
    ).first()
    if not exists:
        schedule = Schedule(
            doctor_id=current_user.id,
            clinic_id=clinic_id,
            day_of_week=day_of_week,
            start_time=start_time,
            end_time=end_time
        )
        db.session.add(schedule)
        db.session.commit()
        generar_disponibilidad_automatica(schedule)
        flash('✅ Agenda guardada y disponibilidad generada', 'success')
    else:
        flash('Ya tienes una agenda para ese día', 'warning')
    return redirect(url_for('routes.mi_agenda'))

@routes.route('/agenda/eliminar/<int:schedule_id>', methods=['POST'])
@login_required
def eliminar_agenda(schedule_id):
    schedule = Schedule.query.get_or_404(schedule_id)
    if schedule.doctor_id != current_user.id:
        return "Acceso denegado", 403
    Availability.query.filter(
        Availability.clinic_id == schedule.clinic_id,
        Availability.is_booked == False
    ).delete()
    db.session.delete(schedule)
    db.session.commit()
    flash('❌ Agenda eliminada', 'info')
    return redirect(url_for('routes.mi_agenda'))

#<!-- Genera disponibilidad automática basada en la agenda -->
def generar_disponibilidad_automatica(schedule, semanas=4):
    today = datetime.now().date()  
    for i in range(semanas):
        days_ahead = (schedule.day_of_week - today.weekday()) % 7
        fecha = today + timedelta(days=days_ahead + i*7)
        current = datetime.combine(fecha, schedule.start_time)
        end = datetime.combine(fecha, schedule.end_time)
        while current.time() < end.time():
            exists = Availability.query.filter_by(
                clinic_id=schedule.clinic_id,
                date=fecha,
                time=current.time()
            ).first()
            if not exists:
                avail = Availability(
                    clinic_id=schedule.clinic_id,
                    date=fecha,
                    time=current.time(),
                    is_booked=False
                )
                db.session.add(avail)
            current += timedelta(minutes=30)
    db.session.commit()

@routes.route('/calendario/<int:doctor_id>/<int:clinic_id>')
def calendario_turnos(doctor_id, clinic_id):
    doctor = User.query.filter_by(id=doctor_id, is_professional=True).first_or_404()
    clinic = Clinic.query.get_or_404(clinic_id)
    return render_template(
        'public/calendario_turnos.html',
        doctor=doctor,
        clinic=clinic,
        doctor_id=doctor_id,
        clinic_id=clinic_id
    )

@routes.route('/paciente/<int:patient_id>/historial')
@login_required
def historial_paciente(patient_id):
    if not current_user.is_professional:
        flash('Acceso denegado', 'danger')
        return redirect(url_for('routes.index'))
    patient = User.query.get_or_404(patient_id)
    tiene_turno = Appointment.query.join(Availability).join(Clinic).filter(
        Clinic.doctor_id == current_user.id,
        Appointment.patient_id == patient_id
    ).first()
    if not tiene_turno:
        flash('No puedes ver este historial: el paciente no ha tenido turnos contigo.', 'danger')
        return redirect(url_for('routes.mi_perfil_medico'))
    turnos = Appointment.query.join(Availability).join(Clinic).filter(
        Clinic.doctor_id == current_user.id,
        Appointment.patient_id == patient_id
    ).order_by(Appointment.created_at.desc()).all()
    notas = MedicalRecord.query.filter_by(
        doctor_id=current_user.id,
        patient_id=patient_id
    ).order_by(MedicalRecord.created_at.desc()).all()
    return render_template(
        'historial_paciente.html',
        patient=patient,
        turnos=turnos,
        notas=notas
    )

@routes.route('/paciente/<int:patient_id>/nota/nueva', methods=['GET', 'POST'])
@login_required
def nueva_nota(patient_id):
    if not current_user.is_professional:
        return "Acceso denegado", 403
    patient = User.query.get_or_404(patient_id)
    if not Appointment.query.join(Availability).join(Clinic).filter(
        Clinic.doctor_id == current_user.id,
        Appointment.patient_id == patient_id
    ).first():
        flash('No puedes agregar notas a este paciente.', 'danger')
        return redirect(url_for('routes.mi_perfil_medico'))
    if request.method == 'POST':
        title = request.form.get('title', '').strip()
        notes = request.form.get('notes', '').strip()
        if not title or not notes:
            flash('Completa todos los campos', 'warning')
        else:
            record = MedicalRecord(
                patient_id=patient_id,
                doctor_id=current_user.id,
                title=title,
                notes=notes
            )
            db.session.add(record)
            db.session.commit()
            flash('✅ Nota clínica guardada', 'success')
            return redirect(url_for('routes.historial_paciente', patient_id=patient_id))
    return render_template('nueva_nota.html', patient=patient)

<!--  templates/editar_perfil_medico.thml -->
{% extends "base.html" %}

{% block title %}Editar Perfil - {{ current_user.username }}{% endblock %}

{% block content %}
<div class="container mt-5">
    <h2>Editar Perfil Profesional</h2>
    <form method="POST">
        <div class="mb-3">
            <label for="specialty" class="form-label">Especialidad</label>
            <input type="text" class="form-control" id="specialty" name="specialty" value="{{ user.specialty }}">
        </div>
        <div class="mb-3">
            <label for="license_number" class="form-label">Matrícula</label>
            <input type="text" class="form-control" id="license_number" name="license_number" value="{{ user.license_number }}">
        </div>
        <div class="mb-3">
            <label for="years_experience" class="form-label">Años de Experiencia</label>
            <input type="number" class="form-control" id="years_experience" name="years_experience" value="{{ user.years_experience }}">
        </div>
        <div class="mb-3">
            <label for="bio" class="form-label">Biografía</label>
            <textarea class="form-control" id="bio" name="bio" rows="5">{{ user.bio }}</textarea>
        </div>
        <div class="d-flex gap-2">
            <button type="submit" class="btn btn-success">Actualizar Perfil</button>
            <a href="{{ url_for('routes.perfil_medico', doctor_id=current_user.id) }}" class="btn btn-secondary">Cancelar</a>
        </div>
        <div class="mb-3">
            <label for="url_slug" class="form-label">Tu enlace público</label>
            <div class="input-group">
                <span class="input-group-text">tuplataforma.com/medico/</span>
                <input type="text" class="form-control" id="url_slug" name="url_slug" 
                value="{{ current_user.url_slug }}" 
                placeholder="tu-nombre">
            </div>
            <div class="form-text">
                Comparte este enlace con tus pacientes para que pidan turno.
            </div>
        </div>
    </form>
</div>
{% endblock %}

<!-- templates/public/perfil_medico.html -->
{% extends "base.html" %}

{% block title %}{{ doctor.username }} - Turnos{% endblock %}

{% block content %}
<div class="container mt-5">
    <div class="text-center mb-5">
        <i class="fas fa-user-md fa-5x text-secondary"></i>
        <h1>{{ doctor.username }}</h1>
        <p class="lead text-primary">{{ doctor.specialty }}</p>
        <p>{{ doctor.bio }}</p>
    </div>

    <div class="row">
        {% for clinic in clinics %}
        <div class="col-md-6 mb-4">
            <div class="card">
                <div class="card-body">
                    <h5>{{ clinic.name }}</h5>
                    <p class="text-muted">{{ clinic.address }}</p>
                    <a href="{{ url_for('routes.calendario_turnos', doctor_id=doctor.id, clinic_id=clinic.id) }}" 
                       class="btn btn-primary">
                        📅 Pedir Turno
                    </a>
                </div>
            </div>
        </div>
        {% endfor %}
    </div>
</div>
{% endblock %}