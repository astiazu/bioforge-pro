"""Baseline: base existente

Revision ID: e568222beb6f
Revises: 
Create Date: 2025-10-08 19:50:20.492284

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'e568222beb6f'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('medical_records')
    op.drop_table('user_roles')
    with op.batch_alter_table('publications', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_publications_slug'))

    op.drop_table('publications')
    op.drop_table('clinic')
    op.drop_table('users')
    op.drop_table('schedules')
    with op.batch_alter_table('company_invites', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_company_invites_invite_code'))
        batch_op.drop_index(batch_op.f('ix_company_invites_is_used'))

    op.drop_table('company_invites')
    op.drop_table('product_category')
    op.drop_table('appointments')
    with op.batch_alter_table('invitation_logs', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_invitation_logs_invite_code'))

    op.drop_table('invitation_logs')
    with op.batch_alter_table('tasks', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_tasks_created_by'))

    op.drop_table('tasks')
    with op.batch_alter_table('assistants', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_assistants_clinic_id'))
        batch_op.drop_index(batch_op.f('ix_assistants_doctor_id'))
        batch_op.drop_index(batch_op.f('ix_assistants_telegram_id'))
        batch_op.drop_index(batch_op.f('ix_assistants_user_id'))

    op.drop_table('assistants')
    op.drop_table('subscribers')
    op.drop_table('visits')
    op.drop_table('product')
    op.drop_table('availability')
    op.drop_table('event')
    op.drop_table('notes')
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('notes',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('title', sa.VARCHAR(length=200), autoincrement=False, nullable=False),
    sa.Column('content', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('status', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('patient_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('approved_by', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('approved_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('featured_image', sa.VARCHAR(length=200), autoincrement=False, nullable=True),
    sa.Column('view_count', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['approved_by'], ['users.id'], name=op.f('notes_approved_by_fkey')),
    sa.ForeignKeyConstraint(['patient_id'], ['users.id'], name=op.f('notes_patient_id_fkey')),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('notes_user_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('notes_pkey'))
    )
    op.create_table('event',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('title', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('start_datetime', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('end_datetime', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('location', sa.VARCHAR(length=150), autoincrement=False, nullable=True),
    sa.Column('clinic_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('is_public', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('max_attendees', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('doctor_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('created_by', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('updated_by', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('image_url', sa.VARCHAR(length=300), autoincrement=False, nullable=True),
    sa.Column('publication_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['clinic_id'], ['clinic.id'], name=op.f('event_clinic_id_fkey')),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], name=op.f('event_created_by_fkey')),
    sa.ForeignKeyConstraint(['doctor_id'], ['users.id'], name=op.f('event_doctor_id_fkey')),
    sa.ForeignKeyConstraint(['publication_id'], ['publications.id'], name=op.f('event_publication_id_fkey')),
    sa.ForeignKeyConstraint(['updated_by'], ['users.id'], name=op.f('event_updated_by_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('event_pkey'))
    )
    op.create_table('availability',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('availability_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('clinic_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('date', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('time', postgresql.TIME(), autoincrement=False, nullable=False),
    sa.Column('is_booked', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['clinic_id'], ['clinic.id'], name='availability_clinic_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='availability_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('product',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('is_service', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('stock', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('is_visible', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('hide_if_out_of_stock', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('doctor_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('created_by', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('updated_by', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('base_price', sa.NUMERIC(precision=10, scale=2), server_default=sa.text('0.00'), autoincrement=False, nullable=False),
    sa.Column('tax_rate', sa.NUMERIC(precision=5, scale=2), server_default=sa.text('0.00'), autoincrement=False, nullable=True),
    sa.Column('has_tax_included', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('is_on_promotion', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('promotion_discount', sa.NUMERIC(precision=5, scale=2), server_default=sa.text('0.00'), autoincrement=False, nullable=True),
    sa.Column('promotion_end_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('image_urls', postgresql.JSON(astext_type=sa.Text()), server_default=sa.text("'[]'::json"), autoincrement=False, nullable=True),
    sa.Column('category_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['category_id'], ['product_category.id'], name=op.f('product_category_id_fkey')),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], name=op.f('product_created_by_fkey')),
    sa.ForeignKeyConstraint(['doctor_id'], ['users.id'], name=op.f('product_doctor_id_fkey')),
    sa.ForeignKeyConstraint(['updated_by'], ['users.id'], name=op.f('product_updated_by_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('product_pkey'))
    )
    op.create_table('visits',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('ip_address', sa.VARCHAR(length=45), autoincrement=False, nullable=True),
    sa.Column('user_agent', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('path', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('visits_pkey'))
    )
    op.create_table('subscribers',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('email', sa.VARCHAR(length=150), autoincrement=False, nullable=False),
    sa.Column('subscribed_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('subscribers_pkey')),
    sa.UniqueConstraint('email', name=op.f('subscribers_email_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_table('assistants',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('assistants_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('email', sa.VARCHAR(length=120), autoincrement=False, nullable=True),
    sa.Column('whatsapp', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('clinic_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('doctor_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('telegram_id', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('type', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_by_user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.CheckConstraint("type::text = ANY (ARRAY['common'::character varying, 'general'::character varying]::text[])", name='valid_assistant_type'),
    sa.ForeignKeyConstraint(['clinic_id'], ['clinic.id'], name='assistants_clinic_id_fkey'),
    sa.ForeignKeyConstraint(['created_by_user_id'], ['users.id'], name='assistants_created_by_user_id_fkey'),
    sa.ForeignKeyConstraint(['doctor_id'], ['users.id'], name='assistants_doctor_id_fkey'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='assistants_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='assistants_pkey'),
    sa.UniqueConstraint('clinic_id', 'name', name='uq_assistant_clinic_name', postgresql_include=[], postgresql_nulls_not_distinct=False),
    postgresql_ignore_search_path=False
    )
    with op.batch_alter_table('assistants', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_assistants_user_id'), ['user_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_assistants_telegram_id'), ['telegram_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_assistants_doctor_id'), ['doctor_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_assistants_clinic_id'), ['clinic_id'], unique=False)

    op.create_table('tasks',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('title', sa.VARCHAR(length=150), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('due_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('doctor_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('assistant_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('created_by', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('clinic_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['assistant_id'], ['assistants.id'], name=op.f('tasks_assistant_id_fkey')),
    sa.ForeignKeyConstraint(['clinic_id'], ['clinic.id'], name=op.f('tasks_clinic_id_fkey')),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], name=op.f('tasks_created_by_fkey')),
    sa.ForeignKeyConstraint(['doctor_id'], ['users.id'], name=op.f('tasks_doctor_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('tasks_pkey'))
    )
    with op.batch_alter_table('tasks', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_tasks_created_by'), ['created_by'], unique=False)

    op.create_table('invitation_logs',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('invite_code', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('email', sa.VARCHAR(length=150), autoincrement=False, nullable=False),
    sa.Column('method', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('success', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('error_message', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('sent_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('doctor_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('assistant_name', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['doctor_id'], ['users.id'], name=op.f('invitation_logs_doctor_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('invitation_logs_pkey'))
    )
    with op.batch_alter_table('invitation_logs', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_invitation_logs_invite_code'), ['invite_code'], unique=False)

    op.create_table('appointments',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('appointments_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('availability_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('patient_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['availability_id'], ['availability.id'], name='appointments_availability_id_fkey'),
    sa.ForeignKeyConstraint(['patient_id'], ['users.id'], name='appointments_patient_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='appointments_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('product_category',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('parent_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('doctor_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['doctor_id'], ['users.id'], name=op.f('product_category_doctor_id_fkey')),
    sa.ForeignKeyConstraint(['parent_id'], ['product_category.id'], name=op.f('product_category_parent_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('product_category_pkey'))
    )
    op.create_table('company_invites',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('doctor_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('invite_code', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('email', sa.VARCHAR(length=150), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('clinic_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('whatsapp', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('assistant_type', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('is_used', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('expires_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('used_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['clinic_id'], ['clinic.id'], name=op.f('company_invites_clinic_id_fkey')),
    sa.ForeignKeyConstraint(['doctor_id'], ['users.id'], name=op.f('company_invites_doctor_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('company_invites_pkey'))
    )
    with op.batch_alter_table('company_invites', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_company_invites_is_used'), ['is_used'], unique=False)
        batch_op.create_index(batch_op.f('ix_company_invites_invite_code'), ['invite_code'], unique=True)

    op.create_table('schedules',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('doctor_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('clinic_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('day_of_week', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('start_time', postgresql.TIME(), autoincrement=False, nullable=False),
    sa.Column('end_time', postgresql.TIME(), autoincrement=False, nullable=False),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['clinic_id'], ['clinic.id'], name=op.f('schedules_clinic_id_fkey')),
    sa.ForeignKeyConstraint(['doctor_id'], ['users.id'], name=op.f('schedules_doctor_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('schedules_pkey'))
    )
    op.create_table('users',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('users_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('username', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('email', sa.VARCHAR(length=150), autoincrement=False, nullable=False),
    sa.Column('password_hash', sa.VARCHAR(length=200), autoincrement=False, nullable=False),
    sa.Column('is_admin', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('is_professional', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('url_slug', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('professional_category', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('specialty', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('bio', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('years_experience', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('profile_photo', sa.VARCHAR(length=200), autoincrement=False, nullable=True),
    sa.Column('license_number', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('services', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('skills', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('role_name', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('role_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('store_enabled', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['role_id'], ['user_roles.id'], name='users_role_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='users_pkey'),
    sa.UniqueConstraint('email', name='users_email_key', postgresql_include=[], postgresql_nulls_not_distinct=False),
    sa.UniqueConstraint('url_slug', name='users_url_slug_key', postgresql_include=[], postgresql_nulls_not_distinct=False),
    sa.UniqueConstraint('username', name='users_username_key', postgresql_include=[], postgresql_nulls_not_distinct=False),
    postgresql_ignore_search_path=False
    )
    op.create_table('clinic',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('clinic_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('address', sa.VARCHAR(length=200), autoincrement=False, nullable=False),
    sa.Column('phone', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('specialty', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('doctor_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['doctor_id'], ['users.id'], name='clinic_doctor_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='clinic_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('publications',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('slug', sa.VARCHAR(length=200), autoincrement=False, nullable=True),
    sa.Column('type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('title', sa.VARCHAR(length=200), autoincrement=False, nullable=False),
    sa.Column('content', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('excerpt', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('is_published', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('tags', sa.VARCHAR(length=200), autoincrement=False, nullable=True),
    sa.Column('read_time', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('published_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('image_url', sa.VARCHAR(length=300), autoincrement=False, nullable=True),
    sa.Column('view_count', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('publications_user_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('publications_pkey'))
    )
    with op.batch_alter_table('publications', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_publications_slug'), ['slug'], unique=True)

    op.create_table('user_roles',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('user_roles_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='user_roles_pkey'),
    sa.UniqueConstraint('name', name='user_roles_name_key', postgresql_include=[], postgresql_nulls_not_distinct=False),
    postgresql_ignore_search_path=False
    )
    op.create_table('medical_records',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('patient_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('doctor_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('appointment_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('title', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('notes', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['appointment_id'], ['appointments.id'], name=op.f('medical_records_appointment_id_fkey')),
    sa.ForeignKeyConstraint(['doctor_id'], ['users.id'], name=op.f('medical_records_doctor_id_fkey')),
    sa.ForeignKeyConstraint(['patient_id'], ['users.id'], name=op.f('medical_records_patient_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('medical_records_pkey'))
    )
    # ### end Alembic commands ###
